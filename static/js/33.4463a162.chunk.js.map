{"version":3,"file":"static/js/33.4463a162.chunk.js","mappings":"wQAGaA,GAAgBC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,0FASbE,EAAgBF,EAAAA,GAAAA,IAAH,6EAMbG,EAAkBH,EAAAA,GAAAA,IAAH,sBAEfI,EAAOJ,EAAAA,GAAAA,EAAH,gDAIJK,EAAeL,EAAAA,GAAAA,IAAH,6FAMZM,EAAcN,EAAAA,GAAAA,GAAH,6F,SCkDxB,EAjEqB,WAAO,IAAD,IACzB,GAA0BO,EAAAA,EAAAA,YAA1B,eAAOC,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAEFE,EAAY,qBADDC,EAAAA,EAAAA,MACaC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAU7C,OARAC,EAAAA,EAAAA,YAAU,WACR,KACEC,EAAAA,EAAAA,IAAiBP,GAASQ,MAAK,SAAAC,GAAI,OAAIV,EAASU,EAAb,GAGpC,CAFC,MAAOC,GACPC,QAAQC,IAAIF,EACb,CACF,GAAE,CAACV,IAEAF,GAEA,UAAC,IAAD,YACE,SAACT,EAAD,CAAewB,GAAIX,EAAnB,6BACA,UAACV,EAAD,YACE,gBACEsB,IAAK,kCAAoChB,EAAMiB,YAC/CC,IAAKlB,EAAMmB,gBAAkBnB,EAAMoB,iBAErC,UAACzB,EAAD,YACE,0BACGK,EAAMmB,gBAAkBnB,EAAMoB,cADjC,KAEGpB,EAAMqB,aAAaC,MAAM,EAAG,GAF/B,QAIA,UAAC1B,EAAD,0BAAmD,GAAhCI,EAAMuB,aAAaC,QAAQ,GAA9C,QACA,sCACA,SAAC5B,EAAD,UAAOI,EAAMyB,YACb,oCACA,SAAC7B,EAAD,UAAOI,EAAM0B,OAAOC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,eAGtD,UAACjC,EAAD,YACE,oDACA,UAACC,EAAD,YACE,yBACE,SAAC,KAAD,CAAMiB,GAAG,OAAOT,MAAO,CAAEC,KAAMH,GAA/B,qBAIF,yBACE,SAAC,KAAD,CAAMW,GAAG,UAAUT,MAAO,CAAEC,KAAMH,GAAlC,8BAMN,SAAC,EAAA2B,SAAD,CAAUC,UAAU,sDAApB,UACE,SAAC,KAAD,UAON,6GAKH,C,uJC9ED,IAAMC,EAAU,mCACVC,EAAY,+BAEZC,EAAY,SAAAC,GAChB,OAAOC,MAAMD,GAAK1B,MAAK,SAAA4B,GACrB,GAAIA,EAASC,GACX,OAAOD,EAASE,MAEnB,GACF,EAEYC,EAAiB,WAC5B,IAAMC,EAAW,UAAMR,EAAN,qCAA4CD,GAE7D,OAAOE,EAAUO,EAClB,EAEYC,EAAe,SAAAC,GAC1B,IAAMC,EAAe,UAAMX,EAAN,iCAAwCD,EAAxC,kBAAyDW,GAE9E,OAAOT,EAAUU,EAClB,EAEYpC,EAAmB,SAAAP,GAC9B,IAAM4C,EAAe,UAAMZ,EAAN,kBAAyBhC,EAAzB,oBAA4C+B,GAEjE,OAAOE,EAAUW,EAClB,EAEYC,EAAe,SAAA7C,GAC1B,IAAM8C,EAAU,UAAMd,EAAN,kBAAyBhC,EAAzB,4BAAoD+B,GAEpE,OAAOE,EAAUa,EAClB,EAEYC,EAAe,SAAA/C,GAC1B,IAAMgD,EAAU,UAAMhB,EAAN,kBAAyBhC,EAAzB,4BAAoD+B,GAEpE,OAAOE,EAAUe,EAClB,C","sources":["pages/MovieDetails/MovieDetails.styled.js","pages/MovieDetails/MovieDetails.jsx","service-API/movies-API.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const LinkBackwards = styled(Link)`\n  color: black;\n\n  &:hover,\n  &:focus {\n    scale: 1.2;\n  }\n`;\n\nexport const MovieMainInfo = styled.div`\n  margin-top: 20px;\n  display: flex;\n  gap: 15px;\n`;\n\nexport const MainInfoWrapper = styled.div``;\n\nexport const Text = styled.p`\n  margin-bottom: 20px;\n`;\n\nexport const MovieAddInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const AddInfoList = styled.ul`\n  display: flex;\n  width: 200px;\n  justify-content: space-evenly;\n`;\n","import { useParams, Link, Outlet, useLocation } from 'react-router-dom';\nimport { useEffect, useState, Suspense } from 'react';\n\nimport { choosenMovieInfo } from '../../service-API/movies-API';\n\nimport { Container } from 'components/common.styled/common.styled';\nimport {\n  MovieMainInfo,\n  MainInfoWrapper,\n  Text,\n  MovieAddInfo,\n  AddInfoList,\n  LinkBackwards,\n} from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState();\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n\n  useEffect(() => {\n    try {\n      choosenMovieInfo(movieId).then(data => setMovie(data));\n    } catch (error) {\n      console.log(error);\n    }\n  }, [movieId]);\n\n  if (movie) {\n    return (\n      <Container>\n        <LinkBackwards to={backLinkHref}>Back to movies</LinkBackwards>\n        <MovieMainInfo>\n          <img\n            src={'https://image.tmdb.org/t/p/w300' + movie.poster_path}\n            alt={movie.original_title || movie.original_name}\n          />\n          <MainInfoWrapper>\n            <h1>\n              {movie.original_title || movie.original_name} (\n              {movie.release_date.slice(0, 4)})\n            </h1>\n            <Text>User score: {movie.vote_average.toFixed(1) * 10}%</Text>\n            <h2>Overview</h2>\n            <Text>{movie.overview}</Text>\n            <h2>Genres</h2>\n            <Text>{movie.genres.map(genre => genre.name).join(', ')}</Text>\n          </MainInfoWrapper>\n        </MovieMainInfo>\n        <MovieAddInfo>\n          <h3>Additional information</h3>\n          <AddInfoList>\n            <li>\n              <Link to=\"cast\" state={{ from: backLinkHref }}>\n                Cast\n              </Link>\n            </li>\n            <li>\n              <Link to=\"reviews\" state={{ from: backLinkHref }}>\n                Reviews\n              </Link>\n            </li>\n          </AddInfoList>\n        </MovieAddInfo>\n        <Suspense fallback={<div>Loading info for you ...</div>}>\n          <Outlet />\n        </Suspense>\n      </Container>\n    );\n  }\n\n  return (\n    <p>\n      We couldn't found this movie information. Please, return BACK and try\n      another one.\n    </p>\n  );\n};\n\nexport default MovieDetails;\n","const API_KEY = 'cd7ce70f2d16b0604871e7d56e1ab9d8';\nconst BASIC_URL = 'https://api.themoviedb.org/3';\n\nconst fetchData = url => {\n  return fetch(url).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n  });\n};\n\nexport const trendingMovies = () => {\n  const trendingUrl = `${BASIC_URL}/trending/all/day?api_key=${API_KEY}`;\n\n  return fetchData(trendingUrl);\n};\n\nexport const searchMovies = searchQuery => {\n  const searchMoviesUrl = `${BASIC_URL}/search/movie?api_key=${API_KEY}&query=${searchQuery}`;\n\n  return fetchData(searchMoviesUrl);\n};\n\nexport const choosenMovieInfo = movieId => {\n  const movieDetailsUrl = `${BASIC_URL}/movie/${movieId}?api_key=${API_KEY}`;\n\n  return fetchData(movieDetailsUrl);\n};\n\nexport const movieCredits = movieId => {\n  const creditsUrl = `${BASIC_URL}/movie/${movieId}/credits?api_key=${API_KEY}`;\n\n  return fetchData(creditsUrl);\n};\n\nexport const movieReviews = movieId => {\n  const reviewsUrl = `${BASIC_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`;\n\n  return fetchData(reviewsUrl);\n};\n"],"names":["LinkBackwards","styled","Link","MovieMainInfo","MainInfoWrapper","Text","MovieAddInfo","AddInfoList","useState","movie","setMovie","movieId","useParams","backLinkHref","useLocation","state","from","useEffect","choosenMovieInfo","then","data","error","console","log","to","src","poster_path","alt","original_title","original_name","release_date","slice","vote_average","toFixed","overview","genres","map","genre","name","join","Suspense","fallback","API_KEY","BASIC_URL","fetchData","url","fetch","response","ok","json","trendingMovies","trendingUrl","searchMovies","searchQuery","searchMoviesUrl","movieDetailsUrl","movieCredits","creditsUrl","movieReviews","reviewsUrl"],"sourceRoot":""}